// Generated by gencpp from file f1tenth_simulator/detected_drowsy.msg
// DO NOT EDIT!


#ifndef F1TENTH_SIMULATOR_MESSAGE_DETECTED_DROWSY_H
#define F1TENTH_SIMULATOR_MESSAGE_DETECTED_DROWSY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace f1tenth_simulator
{
template <class ContainerAllocator>
struct detected_drowsy_
{
  typedef detected_drowsy_<ContainerAllocator> Type;

  detected_drowsy_()
    : detected_msg(0)  {
    }
  detected_drowsy_(const ContainerAllocator& _alloc)
    : detected_msg(0)  {
  (void)_alloc;
    }



   typedef int32_t _detected_msg_type;
  _detected_msg_type detected_msg;





  typedef boost::shared_ptr< ::f1tenth_simulator::detected_drowsy_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::f1tenth_simulator::detected_drowsy_<ContainerAllocator> const> ConstPtr;

}; // struct detected_drowsy_

typedef ::f1tenth_simulator::detected_drowsy_<std::allocator<void> > detected_drowsy;

typedef boost::shared_ptr< ::f1tenth_simulator::detected_drowsy > detected_drowsyPtr;
typedef boost::shared_ptr< ::f1tenth_simulator::detected_drowsy const> detected_drowsyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::f1tenth_simulator::detected_drowsy_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::f1tenth_simulator::detected_drowsy_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::f1tenth_simulator::detected_drowsy_<ContainerAllocator1> & lhs, const ::f1tenth_simulator::detected_drowsy_<ContainerAllocator2> & rhs)
{
  return lhs.detected_msg == rhs.detected_msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::f1tenth_simulator::detected_drowsy_<ContainerAllocator1> & lhs, const ::f1tenth_simulator::detected_drowsy_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace f1tenth_simulator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::f1tenth_simulator::detected_drowsy_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::f1tenth_simulator::detected_drowsy_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::f1tenth_simulator::detected_drowsy_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::f1tenth_simulator::detected_drowsy_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::f1tenth_simulator::detected_drowsy_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::f1tenth_simulator::detected_drowsy_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::f1tenth_simulator::detected_drowsy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff98c70f36496c6ca8cfca46ed611646";
  }

  static const char* value(const ::f1tenth_simulator::detected_drowsy_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff98c70f36496c6cULL;
  static const uint64_t static_value2 = 0xa8cfca46ed611646ULL;
};

template<class ContainerAllocator>
struct DataType< ::f1tenth_simulator::detected_drowsy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f1tenth_simulator/detected_drowsy";
  }

  static const char* value(const ::f1tenth_simulator::detected_drowsy_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::f1tenth_simulator::detected_drowsy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 detected_msg\n"
;
  }

  static const char* value(const ::f1tenth_simulator::detected_drowsy_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::f1tenth_simulator::detected_drowsy_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detected_msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct detected_drowsy_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::f1tenth_simulator::detected_drowsy_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::f1tenth_simulator::detected_drowsy_<ContainerAllocator>& v)
  {
    s << indent << "detected_msg: ";
    Printer<int32_t>::stream(s, indent + "  ", v.detected_msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // F1TENTH_SIMULATOR_MESSAGE_DETECTED_DROWSY_H
